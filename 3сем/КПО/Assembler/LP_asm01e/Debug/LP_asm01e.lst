Microsoft (R) Macro Assembler Version 14.33.31630.0	    10/17/22 19:10:18
LP_asm01e.asm						     Page 1 - 1


				.586P																;система команд(процессор Pentium)
				.MODEL FLAT, STDCALL												;модель памяти, соглашение о вызовах
				;includelib ucrt.lib													; библиотека времени исполнения C
				includelib libucrt.lib
				includelib kernel32.lib												;компоновщику: компоновать с kernel32
				includelib "..\Debug\LP_asm01d.lib"

				ExitProcess			PROTO	: DWORD											;прототип функции для заверения процесса Windows
				system				PROTO C : DWORD											;вызов cmd-команды
				GetStdHandle		PROTO	: DWORD											;получить handle вывода на консоль
				printConsole		PROTO : DWORD, : DWORD									;вызов процедуры вывода в консоль
																							;(-10 ввод,-11 вывод , -12 ошибка устройства вывода)
				WriteConsoleA		PROTO	: DWORD, : DWORD, : DWORD, : DWORD, : DWORD		;вывод на консоль(стандартная фукция)
				SetConsoleTitleA	PROTO	: DWORD										;устанавливает заголовок окна консоли (ANSI)

				EXTRN getmin : proc
				EXTRN getmax : proc
				EXTRN get_pause : proc

				SetConsoleOutputCP	PROTO : DWORD									;устанавливает номер входной кодовой строки
																					;страницы для терминала
				SetConsoleCP PROTO : DWORD											;устанавливает номер выходной кодовой страницы для терминала


				.STACK 4096															;выделение стека

 00000000			.CONST																;сегмент констант
 = 0000000A			endl		equ 0ah													;символ перевода строки (ANCI)
 00000000 0A 00			str_endl	byte endl, 0											; строка "конец строки"
 00000002 70 61 75 73 65	str_pause	db 'pause', 0
	   00
 00000008  00000028 [		zero		byte 40 dup(0)
	    00
	   ]


 00000000			.DATA																;сегмент данных
 00000000 FFFFFFFB		Array			SDWORD	 -5, 5, 23, -1, 25, 9, -4, 22, 9, 0	
	   00000005
	   00000017
	   FFFFFFFF
	   00000019
	   00000009
	   FFFFFFFC
	   00000016
	   00000009
	   00000000
 00000028 4D 79 20 43 6F	consoleTitle	BYTE	'My Console | ТрубачДмитрий 2-5 Win-1251',0				;82h, 0e1h, 0a5h, 0a2h, 0aeh, 0abh, 0aeh, 0a4h
	   6E 73 6F 6C 65
	   20 7C 20 D2 F0
	   F3 E1 E0 F7 C4
	   EC E8 F2 F0 E8
	   E9 20 32 2D 35
	   20 57 69 6E 2D
	   31 32 35 31 00
 00000050 D2 F0 F3 E1 E0	text			BYTE	 "Трубач : getmax - getmin = "
	   F7 20 3A 20 67
	   65 74 6D 61 78
	   20 2D 20 67 65
	   74 6D 69 6E 20
	   3D 20
 0000006B  00000028 [		string			BYTE	 40 dup(0)
	    00
	   ]
 00000093 CC E8 ED E8 EC	min_string		BYTE	"Минимальное значение = "
	   E0 EB FC ED EE
	   E5 20 E7 ED E0
	   F7 E5 ED E8 E5
	   20 3D 20
 000000AA  00000028 [		min_str			BYTE	 40 dup(0)
	    00
	   ]
 000000D2 CC E0 EA F1 E8	max_string		BYTE	"Максимальное значение = "
	   EC E0 EB FC ED
	   EE E5 20 E7 ED
	   E0 F7 E5 ED E8
	   E5 20 3D 20
 000000EA  00000028 [		max_str			BYTE	 40 dup(0)
	    00
	   ]
 00000112 CC E0 F1 F1 E8	array_string	BYTE	"Массив:",0
	   E2 3A 00


 0000011A 00000000		messageSize		DWORD	?
 0000011E 00000000		min				SDWORD	?
 00000122 00000000		max				SDWORD	?
 00000126 00000000		result			SDWORD	?
 0000012A

 = 000000DA			HW				=($ - text)											;вычисление длины строки text
 0000012A 00000000		consolehandle	DWORD 0h											;состояние консоли

 00000000			.CODE																;сенмент кода

 00000000			int_to_char PROC uses eax ebx ecx edi esi,
									pstr		: dword, ;адрес строки результата
									intfield	: sdword ;число для преобразования

 00000008  8B 7D 08			mov edi, pstr
 0000000B  BE 00000000			mov esi, 0
 00000010  8B 45 0C			mov eax, intfield												;число -> в eax
 00000013  99				cdq
 00000014  A9 80000000			test eax, 80000000h													;тестируем знаковый бит
 00000019  BB 0000000A			mov ebx, 10;
 0000001E  F7 FB			idiv ebx														;eax = eax/ebx, остаток в edx(деление целых со знаком)
 00000020  79 09			jns plus														;если положительный то переходим на plus jz plus
 00000022  F7 D8			neg eax
 00000024  F7 DA			neg edx
 00000026  B1 2D			mov cl, '-'														;первый символ результата '-'
 00000028  88 0F			mov [edi], cl													;первый символ результата '-'
 0000002A  47				inc edi															;++edi

 0000002B			plus:
 0000002B  66| 52			push dx															;отстаток ->стек
 0000002D  46				inc esi															;++esi
 0000002E  85 C0			test eax, eax													;eax == 0?
 00000030  74 05			jz fin															;если да то переход на fin
 00000032  99				cdq																;знак расростаняется с eax на edx
 00000033  F7 FB			idiv ebx  
 00000035  EB F4			jmp plus														;безусловный переход на plus

 00000037			fin:																;если в ecx кол-во не 0-ых остатков = кол-ву символов результата
 00000037  8B CE			mov ecx, esi

 00000039			write:																 ;цикл записи результата
 00000039  66| 5B			pop bx															 ;отстаок из стека ->bx
 0000003B  80 C3 30			add bl,'0'														 ;сформировали символ в bl
 0000003E  88 1F			mov [edi], bl													 ;bl -> в результат
 00000040  47				inc edi
 00000041  E2 F6			loop write														 ;если (--ecx)>0 переход на write
					ret
					
 0000004C			int_to_char ENDP

 0000004C			main PROC															;точка входа main
 0000004C			START :																;метка
						INVOKE SetConsoleOutputCP, 1251d
						INVOKE SetConsoleCP, 1251d
						;------------------------------------------------
 00000060  6A 0A				push LENGTHOF Array											;блок вывода минимального значение
 00000062  68 00000000 R			push OFFSET Array
 00000067  E8 00000000 E			call getmin
 0000006C  A3 0000011E R			mov min, eax
						INVOKE int_to_char, OFFSET min_str, min
						INVOKE printConsole, OFFSET min_string, OFFSET  consoleTitle		;вывод в консоль
						INVOKE printConsole, OFFSET str_endl, OFFSET  consoleTitle
						;------------------------------------------------
 0000009F  6A 0A				push LENGTHOF Array											;блок вывода максимального значение
 000000A1  68 00000000 R			push OFFSET Array
 000000A6  E8 00000000 E			call getmax						
 000000AB  A3 00000122 R			mov max, eax
						INVOKE int_to_char, OFFSET max_str, max
						INVOKE printConsole, OFFSET max_string, OFFSET  consoleTitle		;вывод в консоль
						INVOKE printConsole, OFFSET str_endl, OFFSET  consoleTitle
						;------------------------------------------------
 000000DE  2B 05 0000011E R			sub eax, min														;блок разницы между минимальным и максимальным
 000000E4  A3 00000126 R			mov result, eax
						INVOKE int_to_char, OFFSET string, result
						INVOKE printConsole, OFFSET text, OFFSET  consoleTitle		;вывод в консоль
						INVOKE printConsole, OFFSET str_endl, OFFSET  consoleTitle
						;------------------------------------------------
																					
 00000117  E8 00000000 E			call get_pause												;system("pause")	
 0000011C  6A FF				push - 1													;код возврата процесса Windows(параметр ExitProcess)
 0000011E  E8 00000000 E			call ExitProcess											;так завершается любой процесс Windows


 00000123			main ENDP															;конец процедуры
				;-----------------printConsole-------------------------------------------------------------
 00000123			printConsole	 PROC uses eax ebx ecx edi esi,
										pstr	: dword,
										ptitle	: dword

					INVOKE SetConsoleTitleA, ptitle
					INVOKE GetStdHandle, -11
 0000013A  8B 75 08			mov esi, pstr													;подсчет количества симвлов 
 0000013D  BF FFFFFFFF			mov edi, -1														;до 0 символа
 00000142			count:																;выводимой
 00000142  47				inc edi															;на консоль строки
 00000143  80 3C 3E 00			cmp byte ptr [esi+edi], 0
 00000147  75 F9			jne count														;если не 0-символ, на метку  count

					INVOKE WriteConsoleA, eax, pstr, edi, 0, 0						;вывод в консоль

					ret
 00000160			printConsole ENDP



				end main															;конец модуля main

						
Microsoft (R) Macro Assembler Version 14.33.31630.0	    10/17/22 19:10:18
LP_asm01e.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 00000030 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000012E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000160 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
int_to_char  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004C Public STDCALL
  pstr . . . . . . . . . . . . .	DWord	 bp + 00000008
  intfield . . . . . . . . . . .	DWord	 bp + 0000000C
  plus . . . . . . . . . . . . .	L Near	 0000002B _TEXT	
  fin  . . . . . . . . . . . . .	L Near	 00000037 _TEXT	
  write  . . . . . . . . . . . .	L Near	 00000039 _TEXT	
main . . . . . . . . . . . . . .	P Near	 0000004C _TEXT	Length= 000000D7 Public STDCALL
  START  . . . . . . . . . . . .	L Near	 0000004C _TEXT	
printConsole . . . . . . . . . .	P Near	 00000123 _TEXT	Length= 0000003D Public STDCALL
  pstr . . . . . . . . . . . . .	DWord	 bp + 00000008
  ptitle . . . . . . . . . . . .	DWord	 bp + 0000000C
  count  . . . . . . . . . . . .	L Near	 00000142 _TEXT	
system . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
Array  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
HW . . . . . . . . . . . . . . .	Number	 000000DAh   
array_string . . . . . . . . . .	Byte	 00000112 _DATA	
consoleTitle . . . . . . . . . .	Byte	 00000028 _DATA	
consolehandle  . . . . . . . . .	DWord	 0000012A _DATA	
endl . . . . . . . . . . . . . .	Number	 0000000Ah   
get_pause  . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
getmax . . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
getmin . . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
max_string . . . . . . . . . . .	Byte	 000000D2 _DATA	
max_str  . . . . . . . . . . . .	Byte	 000000EA _DATA	
max  . . . . . . . . . . . . . .	DWord	 00000122 _DATA	
messageSize  . . . . . . . . . .	DWord	 0000011A _DATA	
min_string . . . . . . . . . . .	Byte	 00000093 _DATA	
min_str  . . . . . . . . . . . .	Byte	 000000AA _DATA	
min  . . . . . . . . . . . . . .	DWord	 0000011E _DATA	
result . . . . . . . . . . . . .	DWord	 00000126 _DATA	
str_endl . . . . . . . . . . . .	Byte	 00000000 CONST	
str_pause  . . . . . . . . . . .	Byte	 00000002 CONST	
string . . . . . . . . . . . . .	Byte	 0000006B _DATA	
text . . . . . . . . . . . . . .	Byte	 00000050 _DATA	
zero . . . . . . . . . . . . . .	Byte	 00000008 CONST	

	   0 Warnings
	   0 Errors
